
public class Basic {

    public static void resolveCanBrickEnterTheHole(int a, int b, int x, int y, int z) {
        /**
         * –ó–∞–¥–∞–Ω—ã —Ä–∞–∑–º–µ—Ä—ã –ê, –í –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è –∏ —Ä–∞–∑–º–µ—Ä—ã —Ö, —É, z –∫–∏—Ä–ø–∏—á–∞.
         * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ø—Ä–æ–π–¥–µ—Ç –ª–∏ –∫–∏—Ä–ø–∏—á —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ.
         */

        if ((a + b) >= (x + z) || (a + b) >= (x + y) || (a + b) >= (z + y)) {
            System.out.println("In");
        } else {
            System.out.println("NotIn");
        }

    }

    public static void isPointsOnLine(int x1, int y1, int x2, int y2, int x3, int y3) {
        /**
         * x1 =1, y1 =1, x2 =2, y2 =2, x3 =3, y3 =3
         *  (x3 - x1) * (y2 - y1) == (y3 - y1) * (x2 - x1)
         *   (3-1)*(2-1) == (3-1)*(2-1)
         *   2*1 == 2*1
         *   2==2
         */
        if ((x3 - x1) * (y2 - y1) == (y3 - y1) * (x2 - x1)) {
            System.out.println("–¢–æ—á–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –æ–¥–Ω–æ–π –ø—Ä—è–º–æ–π");
        } else {
            System.out.println("–¢–æ—á–∫–∏ –ù–ï –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –æ–¥–Ω–æ–π –ø—Ä—è–º–æ–π");
        }

    }

    public static void findMaxValueFromMin(int a, int b, int c, int d) {
        /**
         * –ù–∞–π—Ç–∏ max(min(a, b), min(c, d))
         * a=5
         * b=3
         * c=8
         * d=4 - answer
         */

        int foundValue = Math.max(Math.min(a, b), Math.min(c, d));
        System.out.println(foundValue);

    }

    public static void checkIfTriangleExistsAndRectangular(int a, int b) {
        /**
         * –î–∞–Ω—ã –¥–≤–∞ —É–≥–ª–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö). –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫,
         * –∏ –µ—Å–ª–∏ –¥–∞, —Ç–æ –±—É–¥–µ—Ç –ª–∏ –æ–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–º.
         */

        if (a + b < 180) {
            System.out.println("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            if (a == 90 || b == 90 || a + b == 90) {
                System.out.println("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π!");
            }
        } else {
            System.out.println("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }
    }

    public static void findDigitsInFirstAndSecondNumbers(int numberOne, int numberTwo) {
        /**
         * –î–∞–Ω—ã –¥–≤–∞ —á–∏—Å–ª–∞. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–∏—Ñ—Ä—ã, –≤—Ö–æ–¥—è—â–∏–µ –≤ –∑–∞–ø–∏—Å—å –∫–∞–∫ –ø–µ—Ä–≤–æ–≥–æ —Ç–∞–∫ –∏ –≤—Ç–æ—Ä–æ–≥–æ —á–∏—Å–ª–∞.
         * 3456
         * 6578
         *
         * –ü–æ–ø—Ä–æ–æ–≤–∞—Ç—å –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–±—ã –±—ã–ª–æ –≤–æ–ª—à–µ–±–Ω–æ. ( –Ω–∏–∫–∞–∫–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ )
         * –†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
         *
         * + –û–¥–Ω–æ–º–µ—Ä–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã
         */
//        int one = numberOne % 10; =6
//        int two = numberOne / 10; =345
//
//        int three = two % 10; =5
//        int forth = two / 10; =34
//
//        int five = forth % 10; =4
//        int six = forth / 10; =3
//
//        int seven = six % 10; =3
//        int eight = six / 10; =0

        int temp = numberTwo;

        while (numberOne > 0) {
            while (numberTwo > 0) {
                if (numberOne % 10 == numberTwo % 10)
                    System.out.println(numberTwo % 10);
                numberTwo = numberTwo / 10;
            }
            if (numberTwo == 0) {
                numberTwo = temp;
            }
            numberOne = numberOne / 10;

        }

    }

    public static void findDivisorsForNumbersInRangeExceptZeroAndItself(int m, int n) {
        /**
         * –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç m –¥–æ n –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–µ–ª–∏—Ç–µ–ª–∏, –∫—Ä–æ–º–µ –µ–¥–∏–Ω–∏—Ü—ã –∏ —Å–∞–º–æ–≥–æ —á–∏—Å–ª–∞.
         * m –∏ n –≤–≤–æ–¥—è—Ç—Å—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
         */

        for (int i = m; i <= n; i++) {
            if (i > 0) {
                for (int j = 2; j < i; j++) {

                    if (i % j == 0) {
                        System.out.println(j);
                    }
                }
            }
        }
    }

    public static void findSum(double e) {
        /**
         * –î–∞–Ω—ã —á–∏—Å–ª–æ–≤–æ–π —Ä—è–¥ –∏ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –µ. –ù–∞–π—Ç–∏ —Å—É–º–º—É —Ç–µ—Ö —á–ª–µ–Ω–æ–≤ —Ä—è–¥–∞, –º–æ–¥—É–ª—å –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω
         * –∑–∞–¥–∞–Ω–Ω–æ–º—É –µ. –û–±—â–∏–π —á–ª–µ–Ω —Ä—è–¥–∞ –∏–º–µ–µ—Ç –≤–∏–¥
         *
         */
        double sum = 0;
        int itemIndex = 0;
        double item = findItemModule(itemIndex);
        while (item >= e) {
            sum += item;
            itemIndex++;
            item = findItemModule(itemIndex);
        }
        System.out.println(sum);
    }

    private static double findItemModule(int itemIndex) {
        /**
         * –î–∞–Ω—ã —á–∏—Å–ª–æ–≤–æ–π —Ä—è–¥ –∏ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –µ. –ù–∞–π—Ç–∏ —Å—É–º–º—É —Ç–µ—Ö —á–ª–µ–Ω–æ–≤ —Ä—è–¥–∞, –º–æ–¥—É–ª—å –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω
         * –∑–∞–¥–∞–Ω–Ω–æ–º—É –µ. –û–±—â–∏–π —á–ª–µ–Ω —Ä—è–¥–∞ –∏–º–µ–µ—Ç –≤–∏–¥
         *
         */

        return Math.abs((1 / Math.pow(2, itemIndex)) + (1 / Math.pow(3, itemIndex)));
    }

    public static void findMultiplicationOfFirstTwoHundredSqrt() {
        /**
         * –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö—Å–æ—Ç —á–∏—Å–µ–ª.
         */
        long multiplication = 1;
        for (int i = 1; i <= 200; i++) {
            multiplication *= Math.pow(i, 2);
        }
        System.out.println(multiplication);

    }

    public static void findSumOfFirstHundredSqrt() {
        /**
         * –ù–∞–π—Ç–∏ —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç–∞ —á–∏—Å–µ–ª.
         */
        int sum = 0;
        for (int i = 1; i <= 100; i++) {
            sum += Math.pow(i, 2);
        }
        System.out.println(sum);
    }

    public static void sumNumbersFromOneToUserNumber(int userNumber) {
        /**
         * –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ª—é–±–æ–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ê –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å—É–º–º–∏—Ä—É–µ—Ç
         * –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–∏—Å–ª–∞.
         */
        if (userNumber < 1) {
            System.out.println("–õ–æ—à–∞—Ä–∞ –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!");
            return;
        }
        int sum = 0;
        for (int i = 1; i <= userNumber; i++) {

            sum += i;
        }

        System.out.println("–°—É–º–º–∞ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ä–∞–≤–Ω–∞ : " + sum);
    }

    public static void areaInXandY(int x, int y) {
        if (((x <= 2 && x >= -2) && (y >= 0 && y <= 4)) || ((x <= 4 && x >= -4) && (y >= -3 && y <= 0))) {
            if ((x == 0 & y == -1)) {
                System.out.println("FALSE");
                return;
            }
            System.out.println("TRUE");
        } else {
            System.out.println("FALSE");
        }
    }

    public static void findValueInHourMinuteSecond() {
        int t = 83540;
        int hours = t / 3600;
        int minutes = (t - hours * 3600) / 60;
        int seconds = t - hours * 3600 - minutes * 60;

        System.out.println("Time : " + hours + " hours " + minutes + " minutes " + seconds + " seconds ");

    }

    public static void changePlaceNumber() {
        double givenNumber = 123.456;
        double result = (givenNumber * 1000) % 1000 + (int) givenNumber / 1000.0;
        System.out.println(result);

    }

    public static void findValueExpressionUsingFormula(double x, double y) {

        /**
         * –í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ (–≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è):
         * (ùë†ùëñùëõùë•+ùëêùëúùë†ùë¶ / ùëêùëúùë†ùë•‚àíùë†ùëñùëõùë¶)‚àóùë°ùëî ùë•ùë¶
         */

        double sinX = Math.sin(x);
        double cosY = Math.cos(y);

        double cosX = Math.cos(x);
        double sinY = Math.sin(y);

        double tg = Math.tan(x * y);

        double sumSinCos = sinX + cosY;
        double subCosSin = cosX - sinY;

        double fraction = sumSinCos / subCosSin;

        double foundValue = fraction * tg;
        System.out.println(foundValue);
    }


    public static void findValueExpression(double a, double b, double c) {
        /**
         * –í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ  ((b + Sqrt(b^2 + 4 ac)) / 2a) - (a^3 * c + b^-2)
         * (–≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è):
         */
        System.out.println("–ù–∞–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è : ((b + Sqrt(b^2 + 4ac)) / 2a) - (a^3 * c + b^-2)");

        double z = Math.pow(b, 2);
        double w = 4 * a * c;
        double k = Math.sqrt(z + w);
        double e = (b + k) / 2 * a; // –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏

        double u = (Math.pow(a, 3) * c) + (Math.pow(b, -2)); // –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏

        double endValue = e - u;

        System.out.println("–ó–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–≤–Ω–æ : " + endValue);


    }

    public static void findValueFunction(int a, int b, int c) {
        // –ù–∞–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ : z = ((a-3) * b / 2) + c
        System.out.println("–ù–∞–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ z = ((a-3) * b / 2) + c");
        int z = 0;
        int q = (a - 3) * b;
        z = q / 2 + c;
        System.out.println("–ó–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ z : " + z);
    }
}
